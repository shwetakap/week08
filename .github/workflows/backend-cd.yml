name: CD - Deploy Backend Services to AKS

on:
  workflow_run:
    workflows: ["Backend CI - Test, Build and Push Images to ACR"] # exact CI workflow name
    types:
      - completed

  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'sk8-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'sk8-rg'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'skacr8.azurecr.io'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    # Default values for automatic runs, overridden by workflow_dispatch inputs
    env:
      AKS_CLUSTER_NAME: ${{ github.event.inputs.aks_cluster_name || 'sk8-aks' }}
      AKS_RESOURCE_GROUP: ${{ github.event.inputs.aks_resource_group || 'sk8-rg' }}
      AKS_ACR_NAME: ${{ github.event.inputs.aks_acr_name || 'skacr8.azurecr.io' }}

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context
        run: |
          az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update --name $AKS_CLUSTER_NAME --resource-group $AKS_RESOURCE_GROUP --attach-acr $AKS_ACR_NAME

      - name: Deploy backend infrastructure
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy backend microservices
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for LoadBalancer IPs
        run: |
          PRODUCT_IP=""
          ORDER_IP=""
          for i in $(seq 1 60); do
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: LoadBalancer IPs not assigned"
            exit 1
          fi
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Set outputs
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Set outputs
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Azure Logout
        run: az logout
